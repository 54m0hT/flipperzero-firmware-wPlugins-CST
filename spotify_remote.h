#pragma once

#include <furi.h>
#include <gui/gui.h>
#include <gui/icon_i.h>
#include <gui/view_dispatcher.h>
#include <gui/scene_manager.h>
#include <gui/modules/submenu.h>
#include <gui/modules/loading.h>
#include <gui/modules/text_box.h>
#include <gui/modules/button_panel.h>
#include <gui/modules/text_input.h>

// Derek Jamison's uart helper
#include "uart_helper.h"

/* generated by fbt from .png files in images folder */
#include <spotify_remote_icons.h>

#define DEVICE_BAUDRATE 115200
#define LINE_DELIMITER '\n'
#define INCLUDE_LINE_DELIMITER false

// enum for referencing module's views
typedef enum {
    SPOTIFY_REMOTE_SUBMENU_VIEW,
    SPOTIFY_REMOTE_LOADING_VIEW,
    SPOTIFY_REMOTE_TEXT_BOX_VIEW,
    SPOTIFY_REMOTE_BUTTON_PANEL_VIEW,
} SpotifyRemoteView;

// enum for scenes
typedef enum {
    SPOTIFY_REMOTE_MAIN_MENU_SCENE,
    SPOTIFY_REMOTE_LOADING_SCENE,
    SPOTIFY_REMOTE_IP_SCENE,
    SPOTIFY_REMOTE_BUTTON_PANEL_SCENE,
    SPOTIFY_REMOTE_ABOUT_SCENE,
    SPOTIFY_REMOTE_WIFI_SSID_SCENE,
    SPOTIFY_REMOTE_WIFI_PASSWORD_SCENE,
    SPOTIFY_REMOTE_SCENE_COUNT,
} SpotifyRemoteScene;

typedef enum {
    SPOTIFY_REMOTE_ON_RECEIVE_EVENT = 100, // so it's not the same as main menu scene launch event
} SpotifyRemoteCustomEvent;

// create app object
typedef struct SpotifyRemoteApp {
    Gui* gui;
    SceneManager* scene_manager;
    ViewDispatcher* view_dispatcher;
    Submenu* submenu;
    Loading* loading;
    TextBox* text_box;
    ButtonPanel* button_panel;
    UartHelper* uart_helper;
    FuriString* message_recieved;
    FuriString* wifi_ssid;
    FuriString* wifi_password;
    bool is_remote_launched;
} SpotifyRemoteApp;
